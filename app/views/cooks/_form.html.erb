<%= form_with(model: cook, local: true) do |form| %>
<% if cook.errors.any? %>
<div id="error_explanation">
  <h2><%= pluralize(cook.errors.count, "error") %> prohibited this cook from being saved:</h2>
  <ul>
    <% cook.errors.full_messages.each do |message| %>
    <li><%= message %></li>
    <% end %>
  </ul>
</div>
<% end %>

<div class="field">
  <%= form.label :Name %>
  <%= form.text_field :name, id: :cook_name %>
</div>

<div class="field">
  <%= form.label :contact %>
  <%= form.text_field :contact, id: :cook_contact %>
</div>

<div class="field">
  <%= form.label :address %>
  <%= form.text_field :address, id: :cook_address , id: "autocomplete", placeholder: "Enter your city",onFocus: "geolocate()"  %>
  <%= form.hidden_field :latitude %>
  <%= form.hidden_field :longitude %>
</div>

<div class="field">
  <%= form.label :city %>
  <%= form.text_field :city, id: :cook_city%>
</div>

<div class="field">
  <%= form.label :state %>
  <%= form.text_field :state, id: :cook_state %>
</div>

<div class="field">
  <%= form.label :country %>
  <%= form.text_field :country, id: :cook_country %>
</div>

<div class="field">
  <%= form.label :zipcode %>
  <%= form.text_field :zipcode, id: :cook_zipcode %>
</div>

<div class="field">
  <%= form.label :photo %>
  <%= form.file_field :photo, id: :cook_photo %>
</div>
<%= form.label :cook_category %>
<%= form.select :cook_category_id, options_for_select(CookCategory.all.collect{|cc| [cc.name, cc.id]})  %>
<div class="actions">
  <%= form.submit %>
</div>
<% end %>

<script>
  var placeSearch, autocomplete;
  var componentForm = {
    street_number: 'short_name',
    route: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    country: 'long_name',
    postal_code: 'short_name'
  };

  function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
          /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
          {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCFiXBOuS1clo2OwwC76LJvF12W13rbDNs&libraries=places&callback=initAutocomplete"
    async defer>

  </script>
